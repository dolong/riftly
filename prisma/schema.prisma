generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model WhiteList {
  id              Int             @id @default(autoincrement())
  userId          String          @unique @default(uuid())
  wallet          String          @unique
  twitter         String?         @default("")
  discordId       String?         @unique @default("")
  numberOfInvites Int @default(0)
  rewards         Reward[]
  pendingRewards  PendingReward[]
}

model PendingReward {
  id           Int            @id @default(autoincrement())
  wallet       String
  rewardTypeId Int
  tokens       Int            @default(0)
  generatedURL String         @default(uuid())
  isClaimed    Boolean        @default(false)

  user         WhiteList      @relation(fields: [wallet], references: [wallet], onDelete: Cascade)
  rewardType   RewardType     @relation(fields: [rewardTypeId], references: [id])
 
  @@unique([wallet, rewardTypeId, generatedURL, tokens])
}

model Reward {
  id           Int            @id @default(autoincrement())
  wallet       String
  rewardTypeId Int
  tokens       Int            @default(0)

  user         WhiteList      @relation(fields: [wallet], references: [wallet], onDelete: Cascade)
  rewardType   RewardType     @relation(fields: [rewardTypeId], references: [id])

  @@unique([wallet, rewardTypeId])
}

model RewardType {
  id            Int             @id @default(autoincrement())
  reward        String
  rewards       Reward[]
  pendingRewards PendingReward[]
}

model Anomuras {
  id         Int    @id @default(autoincrement())
  owner      String
  crabId     Int    @unique
  background String
  legs       String
  shell      String
  claws      String
  body       String
  image      String @default("null")
  headpieces String? @default("null")

  Players       Players? @relation(fields: [playersWallet], references: [wallet])
  playersWallet String?
}

model Players {
  wallet        String     @id
  ownedAnomuras Anomuras[]
}

model Admin {
  id Int    @id @default(autoincrement())
  wallet String @unique
  nonce String?
}
