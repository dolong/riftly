generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model WhiteList {
  id                                 Int                   @id @default(autoincrement())
  userId                             String                @unique @default(uuid())
  wallet                             String                @unique
  twitter                            String?               @default("")
  discordId                          String?               @default("")
  numberOfInvites                    Int                   @default(0)
  rewards                            Reward[]      
  pendingRewards                     PendingReward[]     
  userQuest                          UserQuest[]     
  createdAt                          DateTime              @default(now())
  updatedAt                          DateTime              @updatedAt @default(now())
  discordUserDiscriminator           String?               @default("")
}

model PendingReward {
  id                  Int         @id @default(autoincrement())
  wallet              String      
  rewardTypeId        Int
  quantity            Int         @default(0)
  generatedURL        String      @default(uuid())
  isClaimed           Boolean     @default(false)
  createdAt           DateTime    @default(now())

  user                WhiteList   @relation(fields: [wallet], references: [wallet], onDelete: Cascade)
  rewardType          RewardType  @relation(fields: [rewardTypeId], references: [id])

  @@unique([wallet, rewardTypeId, generatedURL])
}

model Reward {
  id                Int           @id @default(autoincrement())
  wallet            String        
  rewardTypeId      Int
  quantity          Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt @default(now())

  user              WhiteList     @relation(fields: [wallet], references: [wallet], onDelete: Cascade)
  rewardType        RewardType    @relation(fields: [rewardTypeId], references: [id])

  @@unique([wallet, rewardTypeId])
}

model RewardType {
  id             Int             @id @default(autoincrement())
  reward         String
  rewards        Reward[]
  pendingRewards PendingReward[]
  quests         Quest[]
  userQuests     UserQuest[]
}

model UserQuest {
  id                        Int                @id @default(autoincrement())
  wallet                    String             
  questId                   String             @default(uuid())
  rewardedTypeId            Int?
  rewardedQty               Int?
  extendedUserQuestData     Json?
  createdAt                 DateTime           @default(now())

  user                      WhiteList          @relation(fields: [wallet], references: [wallet])
  quest                     Quest              @relation(fields: [questId], references: [questId])
  rewardType                RewardType?        @relation(fields: [rewardedTypeId], references: [id])
  
  @@unique([wallet, questId])
}

model Quest {
  id                    Int             @id @default(autoincrement())
  type                  String        
  description           String?         @default("")
  text                  String        
  completedText         String        
  rewardTypeId          Int       
  quantity              Int             @default(0)
  isEnabled             Boolean         @default(true)
  isRequired            Boolean         @default(false)
  questId               String          @unique @default(uuid())

  extendedQuestData     Json?   
  userQuests            UserQuest[]   
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt @default(now())
  rewardType            RewardType      @relation(fields: [rewardTypeId], references: [id])
}

model Admin {
  id     Int     @id @default(autoincrement())
  wallet String  @unique
  nonce  String?
}

model Anomuras {
  id         Int     @id @default(autoincrement())
  owner      String
  crabId     Int     @unique
  background String
  legs       String
  shell      String
  claws      String
  body       String
  image      String  @default("")
  headpieces String? @default("")

  Players       Players? @relation(fields: [playersWallet], references: [wallet])
  playersWallet String?    
}

model Players {
  id            Int        @id @default(autoincrement())
  wallet        String     @unique
  ownedAnomuras Anomuras[]
}
